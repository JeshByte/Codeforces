We can generate and traverse through the triplets in O(n). So we first create a list of that. Then for the triplets to be good, there are only 3 possible cases. So what we can do is for each case, using a hashmap we go through all the triplets and keep track of the frequency of the equal pairs in the particular positions for the current case. Then as these triplets will be paired among themselves we can use the n(n-1)/2 formula to find the number of good triplets for each set of equal pairs where n is their frequency. Now here we will also end up counting equal triplets which we shouldn't. So we will have to handle it and subtract that extra contribution(which we will calculate using the same formula and then multiply it by 3 as it will be true for all the 3 cases) from our final answer.
