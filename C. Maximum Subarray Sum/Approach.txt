If there are no zeros, we just find the max subarray sum and if it is k, then Yes or else No. Now we can initially put -1e18 in place of all the zeros. Then we can bound all the known subarrays. We then find the max subarray sum out of these bound subarrays. If the sum is more than k, the answer is No. This is because if we try to put a -ve no at any zero to reduce that sum, then in the new subarray sum the subarray after that zero will also get added up. So we won't be able to maintain the sum to be exactly k. Now if it is less than k, then we can obtain the answer by changing the value of only one zero. Let's take a zero. There would be a maximum sum starting from the left of that zero and also from its right. Then in this case the final sum would be left_max+right_max+val_at_zero. So if we just place k-left_max-right_max at the zero's place we would get our required sum. 
