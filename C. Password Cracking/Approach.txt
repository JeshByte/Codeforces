For every position of the string we have two choices - 0 or 1. In backtracking logic as we never get any confirmation we have to explore all the possibilities. But here if we check for 0 and get the confirmation we don't need to ask for 1 anymore. Thus for each bit, we need to ask at most 2 queries. Now in this case, it isn't necessary that we would be generating the string from the 1st bit itself. Lets take the string 01001. Here we will first check for 0. It would give true and it also happens to be the first bit. Then we check for 00. In this case it will give true too, but now we aren't dealing with a prefix anymore. Next we will check for 000 and it will give false. Then we will ask for 001 and it will give true. So now we have found a suffix of the final string. But how will our code know that? Well now when we will check for 0010 and 0011, for both the cases it will give false which will show that this is a suffix. So now we need to check for bits before it. So we will check for 0001 and it will give false. Here we don't need to ask for 1 as we know that we need to add some bit here(assuming the current string's length is <n). So if not 0, we need to add 1. So in this case for further construction we just need 1 query per bit. Overall in this way we would never need more that 2*n queries to find the answer.
